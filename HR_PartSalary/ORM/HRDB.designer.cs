#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4963
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="HRDB")]
	public partial class HRDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccinformation(accinformation instance);
    partial void Updateaccinformation(accinformation instance);
    partial void Deleteaccinformation(accinformation instance);
    partial void Insertsresult(sresult instance);
    partial void Updatesresult(sresult instance);
    partial void Deletesresult(sresult instance);
    partial void Insertcountrydeductions(countrydeductions instance);
    partial void Updatecountrydeductions(countrydeductions instance);
    partial void Deletecountrydeductions(countrydeductions instance);
    partial void Insertcstructure(cstructure instance);
    partial void Updatecstructure(cstructure instance);
    partial void Deletecstructure(cstructure instance);
    partial void Insertdeductionsdomain(deductionsdomain instance);
    partial void Updatedeductionsdomain(deductionsdomain instance);
    partial void Deletedeductionsdomain(deductionsdomain instance);
    partial void Insertfactor(factor instance);
    partial void Updatefactor(factor instance);
    partial void Deletefactor(factor instance);
    partial void Insertftype(ftype instance);
    partial void Updateftype(ftype instance);
    partial void Deleteftype(ftype instance);
    partial void Insertremresult(remresult instance);
    partial void Updateremresult(remresult instance);
    partial void Deleteremresult(remresult instance);
    partial void Insertsalary(salary instance);
    partial void Updatesalary(salary instance);
    partial void Deletesalary(salary instance);
    partial void Insertsreport(sreport instance);
    partial void Updatesreport(sreport instance);
    partial void Deletesreport(sreport instance);
    #endregion
		
		public HRDBDataContext() : 
				base(global::ORM.Properties.Settings.Default.HRDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HRDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<accinformation> accinformation
		{
			get
			{
				return this.GetTable<accinformation>();
			}
		}
		
		public System.Data.Linq.Table<sresult> sresult
		{
			get
			{
				return this.GetTable<sresult>();
			}
		}
		
		public System.Data.Linq.Table<countrydeductions> countrydeductions
		{
			get
			{
				return this.GetTable<countrydeductions>();
			}
		}
		
		public System.Data.Linq.Table<cstructure> cstructure
		{
			get
			{
				return this.GetTable<cstructure>();
			}
		}
		
		public System.Data.Linq.Table<deductionsdomain> deductionsdomain
		{
			get
			{
				return this.GetTable<deductionsdomain>();
			}
		}
		
		public System.Data.Linq.Table<factor> factor
		{
			get
			{
				return this.GetTable<factor>();
			}
		}
		
		public System.Data.Linq.Table<ftype> ftype
		{
			get
			{
				return this.GetTable<ftype>();
			}
		}
		
		public System.Data.Linq.Table<remresult> remresult
		{
			get
			{
				return this.GetTable<remresult>();
			}
		}
		
		public System.Data.Linq.Table<salary> salary
		{
			get
			{
				return this.GetTable<salary>();
			}
		}
		
		public System.Data.Linq.Table<sreport> sreport
		{
			get
			{
				return this.GetTable<sreport>();
			}
		}
	}
	
	[Table(Name="dbo.accinformation")]
	public partial class accinformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _acc_id;
		
		private string _acc_name;
		
		private string _acc_describe;
		
		private string _acc_formula;
		
		private string _acc_undeductions;
		
		private System.Nullable<char> _acc_deductionsway;
		
		private string _acc_maker;
		
		private System.Nullable<System.DateTime> _acc_madetime;
		
		private System.Nullable<System.DateTime> _acc_changetime;
		
		private EntitySet<cstructure> _cstructure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onacc_idChanging(int value);
    partial void Onacc_idChanged();
    partial void Onacc_nameChanging(string value);
    partial void Onacc_nameChanged();
    partial void Onacc_describeChanging(string value);
    partial void Onacc_describeChanged();
    partial void Onacc_formulaChanging(string value);
    partial void Onacc_formulaChanged();
    partial void Onacc_undeductionsChanging(string value);
    partial void Onacc_undeductionsChanged();
    partial void Onacc_deductionswayChanging(System.Nullable<char> value);
    partial void Onacc_deductionswayChanged();
    partial void Onacc_makerChanging(string value);
    partial void Onacc_makerChanged();
    partial void Onacc_madetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onacc_madetimeChanged();
    partial void Onacc_changetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onacc_changetimeChanged();
    #endregion
		
		public accinformation()
		{
			this._cstructure = new EntitySet<cstructure>(new Action<cstructure>(this.attach_cstructure), new Action<cstructure>(this.detach_cstructure));
			OnCreated();
		}
		
		[Column(Storage="_acc_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[Column(Storage="_acc_name", DbType="VarChar(20)")]
		public string acc_name
		{
			get
			{
				return this._acc_name;
			}
			set
			{
				if ((this._acc_name != value))
				{
					this.Onacc_nameChanging(value);
					this.SendPropertyChanging();
					this._acc_name = value;
					this.SendPropertyChanged("acc_name");
					this.Onacc_nameChanged();
				}
			}
		}
		
		[Column(Storage="_acc_describe", DbType="NVarChar(200)")]
		public string acc_describe
		{
			get
			{
				return this._acc_describe;
			}
			set
			{
				if ((this._acc_describe != value))
				{
					this.Onacc_describeChanging(value);
					this.SendPropertyChanging();
					this._acc_describe = value;
					this.SendPropertyChanged("acc_describe");
					this.Onacc_describeChanged();
				}
			}
		}
		
		[Column(Storage="_acc_formula", DbType="NVarChar(500)")]
		public string acc_formula
		{
			get
			{
				return this._acc_formula;
			}
			set
			{
				if ((this._acc_formula != value))
				{
					this.Onacc_formulaChanging(value);
					this.SendPropertyChanging();
					this._acc_formula = value;
					this.SendPropertyChanged("acc_formula");
					this.Onacc_formulaChanged();
				}
			}
		}
		
		[Column(Storage="_acc_undeductions", DbType="NVarChar(500)")]
		public string acc_undeductions
		{
			get
			{
				return this._acc_undeductions;
			}
			set
			{
				if ((this._acc_undeductions != value))
				{
					this.Onacc_undeductionsChanging(value);
					this.SendPropertyChanging();
					this._acc_undeductions = value;
					this.SendPropertyChanged("acc_undeductions");
					this.Onacc_undeductionsChanged();
				}
			}
		}
		
		[Column(Storage="_acc_deductionsway", DbType="VarChar(1)")]
		public System.Nullable<char> acc_deductionsway
		{
			get
			{
				return this._acc_deductionsway;
			}
			set
			{
				if ((this._acc_deductionsway != value))
				{
					this.Onacc_deductionswayChanging(value);
					this.SendPropertyChanging();
					this._acc_deductionsway = value;
					this.SendPropertyChanged("acc_deductionsway");
					this.Onacc_deductionswayChanged();
				}
			}
		}
		
		[Column(Storage="_acc_maker", DbType="NVarChar(10)")]
		public string acc_maker
		{
			get
			{
				return this._acc_maker;
			}
			set
			{
				if ((this._acc_maker != value))
				{
					this.Onacc_makerChanging(value);
					this.SendPropertyChanging();
					this._acc_maker = value;
					this.SendPropertyChanged("acc_maker");
					this.Onacc_makerChanged();
				}
			}
		}
		
		[Column(Storage="_acc_madetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> acc_madetime
		{
			get
			{
				return this._acc_madetime;
			}
			set
			{
				if ((this._acc_madetime != value))
				{
					this.Onacc_madetimeChanging(value);
					this.SendPropertyChanging();
					this._acc_madetime = value;
					this.SendPropertyChanged("acc_madetime");
					this.Onacc_madetimeChanged();
				}
			}
		}
		
		[Column(Storage="_acc_changetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> acc_changetime
		{
			get
			{
				return this._acc_changetime;
			}
			set
			{
				if ((this._acc_changetime != value))
				{
					this.Onacc_changetimeChanging(value);
					this.SendPropertyChanging();
					this._acc_changetime = value;
					this.SendPropertyChanged("acc_changetime");
					this.Onacc_changetimeChanged();
				}
			}
		}
		
		[Association(Name="accinformation_cstructure", Storage="_cstructure", OtherKey="acc_id")]
		public EntitySet<cstructure> cstructure
		{
			get
			{
				return this._cstructure;
			}
			set
			{
				this._cstructure.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cstructure(cstructure entity)
		{
			this.SendPropertyChanging();
			entity.accinformation = this;
		}
		
		private void detach_cstructure(cstructure entity)
		{
			this.SendPropertyChanging();
			entity.accinformation = null;
		}
	}
	
	[Table(Name="dbo.sresult")]
	public partial class sresult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sal_id;
		
		private int _per_id;
		
		private System.Nullable<double> _sre_sodeliver;
		
		private System.Nullable<double> _sre_sodeduct;
		
		private System.Nullable<double> _sre_actdeliver;
		
		private EntityRef<salary> _salary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsal_idChanging(int value);
    partial void Onsal_idChanged();
    partial void Onper_idChanging(int value);
    partial void Onper_idChanged();
    partial void Onsre_sodeliverChanging(System.Nullable<double> value);
    partial void Onsre_sodeliverChanged();
    partial void Onsre_sodeductChanging(System.Nullable<double> value);
    partial void Onsre_sodeductChanged();
    partial void Onsre_actdeliverChanging(System.Nullable<double> value);
    partial void Onsre_actdeliverChanged();
    #endregion
		
		public sresult()
		{
			this._salary = default(EntityRef<salary>);
			OnCreated();
		}
		
		[Column(Storage="_sal_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int sal_id
		{
			get
			{
				return this._sal_id;
			}
			set
			{
				if ((this._sal_id != value))
				{
					if (this._salary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsal_idChanging(value);
					this.SendPropertyChanging();
					this._sal_id = value;
					this.SendPropertyChanged("sal_id");
					this.Onsal_idChanged();
				}
			}
		}
		
		[Column(Storage="_per_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int per_id
		{
			get
			{
				return this._per_id;
			}
			set
			{
				if ((this._per_id != value))
				{
					this.Onper_idChanging(value);
					this.SendPropertyChanging();
					this._per_id = value;
					this.SendPropertyChanged("per_id");
					this.Onper_idChanged();
				}
			}
		}
		
		[Column(Storage="_sre_sodeliver", DbType="Float")]
		public System.Nullable<double> sre_sodeliver
		{
			get
			{
				return this._sre_sodeliver;
			}
			set
			{
				if ((this._sre_sodeliver != value))
				{
					this.Onsre_sodeliverChanging(value);
					this.SendPropertyChanging();
					this._sre_sodeliver = value;
					this.SendPropertyChanged("sre_sodeliver");
					this.Onsre_sodeliverChanged();
				}
			}
		}
		
		[Column(Storage="_sre_sodeduct", DbType="Float")]
		public System.Nullable<double> sre_sodeduct
		{
			get
			{
				return this._sre_sodeduct;
			}
			set
			{
				if ((this._sre_sodeduct != value))
				{
					this.Onsre_sodeductChanging(value);
					this.SendPropertyChanging();
					this._sre_sodeduct = value;
					this.SendPropertyChanged("sre_sodeduct");
					this.Onsre_sodeductChanged();
				}
			}
		}
		
		[Column(Storage="_sre_actdeliver", DbType="Float")]
		public System.Nullable<double> sre_actdeliver
		{
			get
			{
				return this._sre_actdeliver;
			}
			set
			{
				if ((this._sre_actdeliver != value))
				{
					this.Onsre_actdeliverChanging(value);
					this.SendPropertyChanging();
					this._sre_actdeliver = value;
					this.SendPropertyChanged("sre_actdeliver");
					this.Onsre_actdeliverChanged();
				}
			}
		}
		
		[Association(Name="salary_sresult", Storage="_salary", ThisKey="sal_id", IsForeignKey=true)]
		public salary salary
		{
			get
			{
				return this._salary.Entity;
			}
			set
			{
				salary previousValue = this._salary.Entity;
				if (((previousValue != value) 
							|| (this._salary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._salary.Entity = null;
						previousValue.sresult.Remove(this);
					}
					this._salary.Entity = value;
					if ((value != null))
					{
						value.sresult.Add(this);
						this._sal_id = value.sal_id;
					}
					else
					{
						this._sal_id = default(int);
					}
					this.SendPropertyChanged("salary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.countrydeductions")]
	public partial class countrydeductions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cou_id;
		
		private System.Nullable<double> _cou_basis;
		
		private System.Nullable<double> _cou_up;
		
		private System.Nullable<double> _cou_down;
		
		private System.Nullable<double> _cou_percent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncou_idChanging(int value);
    partial void Oncou_idChanged();
    partial void Oncou_basisChanging(System.Nullable<double> value);
    partial void Oncou_basisChanged();
    partial void Oncou_upChanging(System.Nullable<double> value);
    partial void Oncou_upChanged();
    partial void Oncou_downChanging(System.Nullable<double> value);
    partial void Oncou_downChanged();
    partial void Oncou_percentChanging(System.Nullable<double> value);
    partial void Oncou_percentChanged();
    #endregion
		
		public countrydeductions()
		{
			OnCreated();
		}
		
		[Column(Storage="_cou_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int cou_id
		{
			get
			{
				return this._cou_id;
			}
			set
			{
				if ((this._cou_id != value))
				{
					this.Oncou_idChanging(value);
					this.SendPropertyChanging();
					this._cou_id = value;
					this.SendPropertyChanged("cou_id");
					this.Oncou_idChanged();
				}
			}
		}
		
		[Column(Storage="_cou_basis", DbType="Float")]
		public System.Nullable<double> cou_basis
		{
			get
			{
				return this._cou_basis;
			}
			set
			{
				if ((this._cou_basis != value))
				{
					this.Oncou_basisChanging(value);
					this.SendPropertyChanging();
					this._cou_basis = value;
					this.SendPropertyChanged("cou_basis");
					this.Oncou_basisChanged();
				}
			}
		}
		
		[Column(Storage="_cou_up", DbType="Float")]
		public System.Nullable<double> cou_up
		{
			get
			{
				return this._cou_up;
			}
			set
			{
				if ((this._cou_up != value))
				{
					this.Oncou_upChanging(value);
					this.SendPropertyChanging();
					this._cou_up = value;
					this.SendPropertyChanged("cou_up");
					this.Oncou_upChanged();
				}
			}
		}
		
		[Column(Storage="_cou_down", DbType="Float")]
		public System.Nullable<double> cou_down
		{
			get
			{
				return this._cou_down;
			}
			set
			{
				if ((this._cou_down != value))
				{
					this.Oncou_downChanging(value);
					this.SendPropertyChanging();
					this._cou_down = value;
					this.SendPropertyChanged("cou_down");
					this.Oncou_downChanged();
				}
			}
		}
		
		[Column(Storage="_cou_percent", DbType="Float")]
		public System.Nullable<double> cou_percent
		{
			get
			{
				return this._cou_percent;
			}
			set
			{
				if ((this._cou_percent != value))
				{
					this.Oncou_percentChanging(value);
					this.SendPropertyChanging();
					this._cou_percent = value;
					this.SendPropertyChanged("cou_percent");
					this.Oncou_percentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.cstructure")]
	public partial class cstructure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _per_id;
		
		private System.Nullable<int> _acc_id;
		
		private int _fac_id;
		
		private System.Nullable<double> _cst_value;
		
		private EntityRef<accinformation> _accinformation;
		
		private EntityRef<factor> _factor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onper_idChanging(int value);
    partial void Onper_idChanged();
    partial void Onacc_idChanging(System.Nullable<int> value);
    partial void Onacc_idChanged();
    partial void Onfac_idChanging(int value);
    partial void Onfac_idChanged();
    partial void Oncst_valueChanging(System.Nullable<double> value);
    partial void Oncst_valueChanged();
    #endregion
		
		public cstructure()
		{
			this._accinformation = default(EntityRef<accinformation>);
			this._factor = default(EntityRef<factor>);
			OnCreated();
		}
		
		[Column(Storage="_per_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int per_id
		{
			get
			{
				return this._per_id;
			}
			set
			{
				if ((this._per_id != value))
				{
					this.Onper_idChanging(value);
					this.SendPropertyChanging();
					this._per_id = value;
					this.SendPropertyChanged("per_id");
					this.Onper_idChanged();
				}
			}
		}
		
		[Column(Storage="_acc_id", DbType="Int")]
		public System.Nullable<int> acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					if (this._accinformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[Column(Storage="_fac_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int fac_id
		{
			get
			{
				return this._fac_id;
			}
			set
			{
				if ((this._fac_id != value))
				{
					if (this._factor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfac_idChanging(value);
					this.SendPropertyChanging();
					this._fac_id = value;
					this.SendPropertyChanged("fac_id");
					this.Onfac_idChanged();
				}
			}
		}
		
		[Column(Storage="_cst_value", DbType="Float")]
		public System.Nullable<double> cst_value
		{
			get
			{
				return this._cst_value;
			}
			set
			{
				if ((this._cst_value != value))
				{
					this.Oncst_valueChanging(value);
					this.SendPropertyChanging();
					this._cst_value = value;
					this.SendPropertyChanged("cst_value");
					this.Oncst_valueChanged();
				}
			}
		}
		
		[Association(Name="accinformation_cstructure", Storage="_accinformation", ThisKey="acc_id", IsForeignKey=true)]
		public accinformation accinformation
		{
			get
			{
				return this._accinformation.Entity;
			}
			set
			{
				accinformation previousValue = this._accinformation.Entity;
				if (((previousValue != value) 
							|| (this._accinformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._accinformation.Entity = null;
						previousValue.cstructure.Remove(this);
					}
					this._accinformation.Entity = value;
					if ((value != null))
					{
						value.cstructure.Add(this);
						this._acc_id = value.acc_id;
					}
					else
					{
						this._acc_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("accinformation");
				}
			}
		}
		
		[Association(Name="factor_cstructure", Storage="_factor", ThisKey="fac_id", IsForeignKey=true)]
		public factor factor
		{
			get
			{
				return this._factor.Entity;
			}
			set
			{
				factor previousValue = this._factor.Entity;
				if (((previousValue != value) 
							|| (this._factor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._factor.Entity = null;
						previousValue.cstructure.Remove(this);
					}
					this._factor.Entity = value;
					if ((value != null))
					{
						value.cstructure.Add(this);
						this._fac_id = value.fac_id;
					}
					else
					{
						this._fac_id = default(int);
					}
					this.SendPropertyChanged("factor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.deductionsdomain")]
	public partial class deductionsdomain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ded_id;
		
		private System.Nullable<double> _ded_up;
		
		private System.Nullable<double> _ded_down;
		
		private System.Nullable<double> _ded_fixedvalue;
		
		private System.Nullable<double> _ded_percent;
		
		private System.Nullable<char> _ded_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onded_idChanging(int value);
    partial void Onded_idChanged();
    partial void Onded_upChanging(System.Nullable<double> value);
    partial void Onded_upChanged();
    partial void Onded_downChanging(System.Nullable<double> value);
    partial void Onded_downChanged();
    partial void Onded_fixedvalueChanging(System.Nullable<double> value);
    partial void Onded_fixedvalueChanged();
    partial void Onded_percentChanging(System.Nullable<double> value);
    partial void Onded_percentChanged();
    partial void Onded_typeChanging(System.Nullable<char> value);
    partial void Onded_typeChanged();
    #endregion
		
		public deductionsdomain()
		{
			OnCreated();
		}
		
		[Column(Storage="_ded_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ded_id
		{
			get
			{
				return this._ded_id;
			}
			set
			{
				if ((this._ded_id != value))
				{
					this.Onded_idChanging(value);
					this.SendPropertyChanging();
					this._ded_id = value;
					this.SendPropertyChanged("ded_id");
					this.Onded_idChanged();
				}
			}
		}
		
		[Column(Storage="_ded_up", DbType="Float")]
		public System.Nullable<double> ded_up
		{
			get
			{
				return this._ded_up;
			}
			set
			{
				if ((this._ded_up != value))
				{
					this.Onded_upChanging(value);
					this.SendPropertyChanging();
					this._ded_up = value;
					this.SendPropertyChanged("ded_up");
					this.Onded_upChanged();
				}
			}
		}
		
		[Column(Storage="_ded_down", DbType="Float")]
		public System.Nullable<double> ded_down
		{
			get
			{
				return this._ded_down;
			}
			set
			{
				if ((this._ded_down != value))
				{
					this.Onded_downChanging(value);
					this.SendPropertyChanging();
					this._ded_down = value;
					this.SendPropertyChanged("ded_down");
					this.Onded_downChanged();
				}
			}
		}
		
		[Column(Storage="_ded_fixedvalue", DbType="Float")]
		public System.Nullable<double> ded_fixedvalue
		{
			get
			{
				return this._ded_fixedvalue;
			}
			set
			{
				if ((this._ded_fixedvalue != value))
				{
					this.Onded_fixedvalueChanging(value);
					this.SendPropertyChanging();
					this._ded_fixedvalue = value;
					this.SendPropertyChanged("ded_fixedvalue");
					this.Onded_fixedvalueChanged();
				}
			}
		}
		
		[Column(Storage="_ded_percent", DbType="Float")]
		public System.Nullable<double> ded_percent
		{
			get
			{
				return this._ded_percent;
			}
			set
			{
				if ((this._ded_percent != value))
				{
					this.Onded_percentChanging(value);
					this.SendPropertyChanging();
					this._ded_percent = value;
					this.SendPropertyChanged("ded_percent");
					this.Onded_percentChanged();
				}
			}
		}
		
		[Column(Storage="_ded_type", DbType="NVarChar(1)")]
		public System.Nullable<char> ded_type
		{
			get
			{
				return this._ded_type;
			}
			set
			{
				if ((this._ded_type != value))
				{
					this.Onded_typeChanging(value);
					this.SendPropertyChanging();
					this._ded_type = value;
					this.SendPropertyChanged("ded_type");
					this.Onded_typeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.factor")]
	public partial class factor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fac_id;
		
		private System.Nullable<int> _fty_id;
		
		private string _fac_name;
		
		private System.Nullable<char> _fac_isdefault;
		
		private string _fac_describe;
		
		private string _fac_maker;
		
		private System.Nullable<System.DateTime> _fac_madetime;
		
		private System.Nullable<System.DateTime> _fac_changetime;
		
		private System.Nullable<char> _boo_flag;
		
		private EntitySet<cstructure> _cstructure;
		
		private EntityRef<ftype> _ftype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfac_idChanging(int value);
    partial void Onfac_idChanged();
    partial void Onfty_idChanging(System.Nullable<int> value);
    partial void Onfty_idChanged();
    partial void Onfac_nameChanging(string value);
    partial void Onfac_nameChanged();
    partial void Onfac_isdefaultChanging(System.Nullable<char> value);
    partial void Onfac_isdefaultChanged();
    partial void Onfac_describeChanging(string value);
    partial void Onfac_describeChanged();
    partial void Onfac_makerChanging(string value);
    partial void Onfac_makerChanged();
    partial void Onfac_madetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onfac_madetimeChanged();
    partial void Onfac_changetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onfac_changetimeChanged();
    partial void Onboo_flagChanging(System.Nullable<char> value);
    partial void Onboo_flagChanged();
    #endregion
		
		public factor()
		{
			this._cstructure = new EntitySet<cstructure>(new Action<cstructure>(this.attach_cstructure), new Action<cstructure>(this.detach_cstructure));
			this._ftype = default(EntityRef<ftype>);
			OnCreated();
		}
		
		[Column(Storage="_fac_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int fac_id
		{
			get
			{
				return this._fac_id;
			}
			set
			{
				if ((this._fac_id != value))
				{
					this.Onfac_idChanging(value);
					this.SendPropertyChanging();
					this._fac_id = value;
					this.SendPropertyChanged("fac_id");
					this.Onfac_idChanged();
				}
			}
		}
		
		[Column(Storage="_fty_id", DbType="Int")]
		public System.Nullable<int> fty_id
		{
			get
			{
				return this._fty_id;
			}
			set
			{
				if ((this._fty_id != value))
				{
					if (this._ftype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfty_idChanging(value);
					this.SendPropertyChanging();
					this._fty_id = value;
					this.SendPropertyChanged("fty_id");
					this.Onfty_idChanged();
				}
			}
		}
		
		[Column(Storage="_fac_name", DbType="NVarChar(20)")]
		public string fac_name
		{
			get
			{
				return this._fac_name;
			}
			set
			{
				if ((this._fac_name != value))
				{
					this.Onfac_nameChanging(value);
					this.SendPropertyChanging();
					this._fac_name = value;
					this.SendPropertyChanged("fac_name");
					this.Onfac_nameChanged();
				}
			}
		}
		
		[Column(Storage="_fac_isdefault", DbType="NVarChar(1)")]
		public System.Nullable<char> fac_isdefault
		{
			get
			{
				return this._fac_isdefault;
			}
			set
			{
				if ((this._fac_isdefault != value))
				{
					this.Onfac_isdefaultChanging(value);
					this.SendPropertyChanging();
					this._fac_isdefault = value;
					this.SendPropertyChanged("fac_isdefault");
					this.Onfac_isdefaultChanged();
				}
			}
		}
		
		[Column(Storage="_fac_describe", DbType="NVarChar(200)")]
		public string fac_describe
		{
			get
			{
				return this._fac_describe;
			}
			set
			{
				if ((this._fac_describe != value))
				{
					this.Onfac_describeChanging(value);
					this.SendPropertyChanging();
					this._fac_describe = value;
					this.SendPropertyChanged("fac_describe");
					this.Onfac_describeChanged();
				}
			}
		}
		
		[Column(Storage="_fac_maker", DbType="NVarChar(10)")]
		public string fac_maker
		{
			get
			{
				return this._fac_maker;
			}
			set
			{
				if ((this._fac_maker != value))
				{
					this.Onfac_makerChanging(value);
					this.SendPropertyChanging();
					this._fac_maker = value;
					this.SendPropertyChanged("fac_maker");
					this.Onfac_makerChanged();
				}
			}
		}
		
		[Column(Storage="_fac_madetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> fac_madetime
		{
			get
			{
				return this._fac_madetime;
			}
			set
			{
				if ((this._fac_madetime != value))
				{
					this.Onfac_madetimeChanging(value);
					this.SendPropertyChanging();
					this._fac_madetime = value;
					this.SendPropertyChanged("fac_madetime");
					this.Onfac_madetimeChanged();
				}
			}
		}
		
		[Column(Storage="_fac_changetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> fac_changetime
		{
			get
			{
				return this._fac_changetime;
			}
			set
			{
				if ((this._fac_changetime != value))
				{
					this.Onfac_changetimeChanging(value);
					this.SendPropertyChanging();
					this._fac_changetime = value;
					this.SendPropertyChanged("fac_changetime");
					this.Onfac_changetimeChanged();
				}
			}
		}
		
		[Column(Storage="_boo_flag", DbType="NVarChar(1)")]
		public System.Nullable<char> boo_flag
		{
			get
			{
				return this._boo_flag;
			}
			set
			{
				if ((this._boo_flag != value))
				{
					this.Onboo_flagChanging(value);
					this.SendPropertyChanging();
					this._boo_flag = value;
					this.SendPropertyChanged("boo_flag");
					this.Onboo_flagChanged();
				}
			}
		}
		
		[Association(Name="factor_cstructure", Storage="_cstructure", OtherKey="fac_id")]
		public EntitySet<cstructure> cstructure
		{
			get
			{
				return this._cstructure;
			}
			set
			{
				this._cstructure.Assign(value);
			}
		}
		
		[Association(Name="ftype_factor", Storage="_ftype", ThisKey="fty_id", IsForeignKey=true)]
		public ftype ftype
		{
			get
			{
				return this._ftype.Entity;
			}
			set
			{
				ftype previousValue = this._ftype.Entity;
				if (((previousValue != value) 
							|| (this._ftype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ftype.Entity = null;
						previousValue.factor.Remove(this);
					}
					this._ftype.Entity = value;
					if ((value != null))
					{
						value.factor.Add(this);
						this._fty_id = value.fty_id;
					}
					else
					{
						this._fty_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("ftype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cstructure(cstructure entity)
		{
			this.SendPropertyChanging();
			entity.factor = this;
		}
		
		private void detach_cstructure(cstructure entity)
		{
			this.SendPropertyChanging();
			entity.factor = null;
		}
	}
	
	[Table(Name="dbo.ftype")]
	public partial class ftype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fty_id;
		
		private string _fty_name;
		
		private string _fty_describe;
		
		private string _fty_maker;
		
		private System.Nullable<System.DateTime> _fty_madetime;
		
		private System.Nullable<System.DateTime> _fty_changetime;
		
		private EntitySet<factor> _factor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfty_idChanging(int value);
    partial void Onfty_idChanged();
    partial void Onfty_nameChanging(string value);
    partial void Onfty_nameChanged();
    partial void Onfty_describeChanging(string value);
    partial void Onfty_describeChanged();
    partial void Onfty_makerChanging(string value);
    partial void Onfty_makerChanged();
    partial void Onfty_madetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onfty_madetimeChanged();
    partial void Onfty_changetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onfty_changetimeChanged();
    #endregion
		
		public ftype()
		{
			this._factor = new EntitySet<factor>(new Action<factor>(this.attach_factor), new Action<factor>(this.detach_factor));
			OnCreated();
		}
		
		[Column(Storage="_fty_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int fty_id
		{
			get
			{
				return this._fty_id;
			}
			set
			{
				if ((this._fty_id != value))
				{
					this.Onfty_idChanging(value);
					this.SendPropertyChanging();
					this._fty_id = value;
					this.SendPropertyChanged("fty_id");
					this.Onfty_idChanged();
				}
			}
		}
		
		[Column(Storage="_fty_name", DbType="NVarChar(20)")]
		public string fty_name
		{
			get
			{
				return this._fty_name;
			}
			set
			{
				if ((this._fty_name != value))
				{
					this.Onfty_nameChanging(value);
					this.SendPropertyChanging();
					this._fty_name = value;
					this.SendPropertyChanged("fty_name");
					this.Onfty_nameChanged();
				}
			}
		}
		
		[Column(Storage="_fty_describe", DbType="NVarChar(200)")]
		public string fty_describe
		{
			get
			{
				return this._fty_describe;
			}
			set
			{
				if ((this._fty_describe != value))
				{
					this.Onfty_describeChanging(value);
					this.SendPropertyChanging();
					this._fty_describe = value;
					this.SendPropertyChanged("fty_describe");
					this.Onfty_describeChanged();
				}
			}
		}
		
		[Column(Storage="_fty_maker", DbType="NVarChar(10)")]
		public string fty_maker
		{
			get
			{
				return this._fty_maker;
			}
			set
			{
				if ((this._fty_maker != value))
				{
					this.Onfty_makerChanging(value);
					this.SendPropertyChanging();
					this._fty_maker = value;
					this.SendPropertyChanged("fty_maker");
					this.Onfty_makerChanged();
				}
			}
		}
		
		[Column(Storage="_fty_madetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> fty_madetime
		{
			get
			{
				return this._fty_madetime;
			}
			set
			{
				if ((this._fty_madetime != value))
				{
					this.Onfty_madetimeChanging(value);
					this.SendPropertyChanging();
					this._fty_madetime = value;
					this.SendPropertyChanged("fty_madetime");
					this.Onfty_madetimeChanged();
				}
			}
		}
		
		[Column(Storage="_fty_changetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> fty_changetime
		{
			get
			{
				return this._fty_changetime;
			}
			set
			{
				if ((this._fty_changetime != value))
				{
					this.Onfty_changetimeChanging(value);
					this.SendPropertyChanging();
					this._fty_changetime = value;
					this.SendPropertyChanged("fty_changetime");
					this.Onfty_changetimeChanged();
				}
			}
		}
		
		[Association(Name="ftype_factor", Storage="_factor", OtherKey="fty_id")]
		public EntitySet<factor> factor
		{
			get
			{
				return this._factor;
			}
			set
			{
				this._factor.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_factor(factor entity)
		{
			this.SendPropertyChanging();
			entity.ftype = this;
		}
		
		private void detach_factor(factor entity)
		{
			this.SendPropertyChanging();
			entity.ftype = null;
		}
	}
	
	[Table(Name="dbo.remresult")]
	public partial class remresult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _per_id;
		
		private int _sal_id;
		
		private System.Nullable<int> _acc_id;
		
		private string _acc_name;
		
		private System.Nullable<int> _fac_id;
		
		private string _fac_name;
		
		private string _fty_name;
		
		private System.Nullable<double> _fac_value;
		
		private EntityRef<salary> _salary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onper_idChanging(int value);
    partial void Onper_idChanged();
    partial void Onsal_idChanging(int value);
    partial void Onsal_idChanged();
    partial void Onacc_idChanging(System.Nullable<int> value);
    partial void Onacc_idChanged();
    partial void Onacc_nameChanging(string value);
    partial void Onacc_nameChanged();
    partial void Onfac_idChanging(System.Nullable<int> value);
    partial void Onfac_idChanged();
    partial void Onfac_nameChanging(string value);
    partial void Onfac_nameChanged();
    partial void Onfty_nameChanging(string value);
    partial void Onfty_nameChanged();
    partial void Onfac_valueChanging(System.Nullable<double> value);
    partial void Onfac_valueChanged();
    #endregion
		
		public remresult()
		{
			this._salary = default(EntityRef<salary>);
			OnCreated();
		}
		
		[Column(Storage="_per_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int per_id
		{
			get
			{
				return this._per_id;
			}
			set
			{
				if ((this._per_id != value))
				{
					this.Onper_idChanging(value);
					this.SendPropertyChanging();
					this._per_id = value;
					this.SendPropertyChanged("per_id");
					this.Onper_idChanged();
				}
			}
		}
		
		[Column(Storage="_sal_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int sal_id
		{
			get
			{
				return this._sal_id;
			}
			set
			{
				if ((this._sal_id != value))
				{
					if (this._salary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsal_idChanging(value);
					this.SendPropertyChanging();
					this._sal_id = value;
					this.SendPropertyChanged("sal_id");
					this.Onsal_idChanged();
				}
			}
		}
		
		[Column(Storage="_acc_id", DbType="Int")]
		public System.Nullable<int> acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[Column(Storage="_acc_name", DbType="NVarChar(20)")]
		public string acc_name
		{
			get
			{
				return this._acc_name;
			}
			set
			{
				if ((this._acc_name != value))
				{
					this.Onacc_nameChanging(value);
					this.SendPropertyChanging();
					this._acc_name = value;
					this.SendPropertyChanged("acc_name");
					this.Onacc_nameChanged();
				}
			}
		}
		
		[Column(Storage="_fac_id", DbType="Int")]
		public System.Nullable<int> fac_id
		{
			get
			{
				return this._fac_id;
			}
			set
			{
				if ((this._fac_id != value))
				{
					this.Onfac_idChanging(value);
					this.SendPropertyChanging();
					this._fac_id = value;
					this.SendPropertyChanged("fac_id");
					this.Onfac_idChanged();
				}
			}
		}
		
		[Column(Storage="_fac_name", DbType="NVarChar(20)")]
		public string fac_name
		{
			get
			{
				return this._fac_name;
			}
			set
			{
				if ((this._fac_name != value))
				{
					this.Onfac_nameChanging(value);
					this.SendPropertyChanging();
					this._fac_name = value;
					this.SendPropertyChanged("fac_name");
					this.Onfac_nameChanged();
				}
			}
		}
		
		[Column(Storage="_fty_name", DbType="NVarChar(20)")]
		public string fty_name
		{
			get
			{
				return this._fty_name;
			}
			set
			{
				if ((this._fty_name != value))
				{
					this.Onfty_nameChanging(value);
					this.SendPropertyChanging();
					this._fty_name = value;
					this.SendPropertyChanged("fty_name");
					this.Onfty_nameChanged();
				}
			}
		}
		
		[Column(Storage="_fac_value", DbType="Float")]
		public System.Nullable<double> fac_value
		{
			get
			{
				return this._fac_value;
			}
			set
			{
				if ((this._fac_value != value))
				{
					this.Onfac_valueChanging(value);
					this.SendPropertyChanging();
					this._fac_value = value;
					this.SendPropertyChanged("fac_value");
					this.Onfac_valueChanged();
				}
			}
		}
		
		[Association(Name="salary_remresult", Storage="_salary", ThisKey="sal_id", IsForeignKey=true)]
		public salary salary
		{
			get
			{
				return this._salary.Entity;
			}
			set
			{
				salary previousValue = this._salary.Entity;
				if (((previousValue != value) 
							|| (this._salary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._salary.Entity = null;
						previousValue.remresult.Remove(this);
					}
					this._salary.Entity = value;
					if ((value != null))
					{
						value.remresult.Add(this);
						this._sal_id = value.sal_id;
					}
					else
					{
						this._sal_id = default(int);
					}
					this.SendPropertyChanged("salary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.salary")]
	public partial class salary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sal_id;
		
		private string _sal_name;
		
		private System.Nullable<int> _sal_year;
		
		private System.Nullable<int> _sal_month;
		
		private System.Nullable<System.DateTime> _sal_madetime;
		
		private string _sal_isexamine;
		
		private string _sal_examiner;
		
		private System.Nullable<System.DateTime> _sal_examinetime;
		
		private System.Nullable<char> _sal_isgrant;
		
		private System.Nullable<System.DateTime> _sal_granttime;
		
		private EntitySet<sresult> _sresult;
		
		private EntitySet<remresult> _remresult;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsal_idChanging(int value);
    partial void Onsal_idChanged();
    partial void Onsal_nameChanging(string value);
    partial void Onsal_nameChanged();
    partial void Onsal_yearChanging(System.Nullable<int> value);
    partial void Onsal_yearChanged();
    partial void Onsal_monthChanging(System.Nullable<int> value);
    partial void Onsal_monthChanged();
    partial void Onsal_madetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onsal_madetimeChanged();
    partial void Onsal_isexamineChanging(string value);
    partial void Onsal_isexamineChanged();
    partial void Onsal_examinerChanging(string value);
    partial void Onsal_examinerChanged();
    partial void Onsal_examinetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onsal_examinetimeChanged();
    partial void Onsal_isgrantChanging(System.Nullable<char> value);
    partial void Onsal_isgrantChanged();
    partial void Onsal_granttimeChanging(System.Nullable<System.DateTime> value);
    partial void Onsal_granttimeChanged();
    #endregion
		
		public salary()
		{
			this._sresult = new EntitySet<sresult>(new Action<sresult>(this.attach_sresult), new Action<sresult>(this.detach_sresult));
			this._remresult = new EntitySet<remresult>(new Action<remresult>(this.attach_remresult), new Action<remresult>(this.detach_remresult));
			OnCreated();
		}
		
		[Column(Storage="_sal_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int sal_id
		{
			get
			{
				return this._sal_id;
			}
			set
			{
				if ((this._sal_id != value))
				{
					this.Onsal_idChanging(value);
					this.SendPropertyChanging();
					this._sal_id = value;
					this.SendPropertyChanged("sal_id");
					this.Onsal_idChanged();
				}
			}
		}
		
		[Column(Storage="_sal_name", DbType="NVarChar(20)")]
		public string sal_name
		{
			get
			{
				return this._sal_name;
			}
			set
			{
				if ((this._sal_name != value))
				{
					this.Onsal_nameChanging(value);
					this.SendPropertyChanging();
					this._sal_name = value;
					this.SendPropertyChanged("sal_name");
					this.Onsal_nameChanged();
				}
			}
		}
		
		[Column(Storage="_sal_year", DbType="Int")]
		public System.Nullable<int> sal_year
		{
			get
			{
				return this._sal_year;
			}
			set
			{
				if ((this._sal_year != value))
				{
					this.Onsal_yearChanging(value);
					this.SendPropertyChanging();
					this._sal_year = value;
					this.SendPropertyChanged("sal_year");
					this.Onsal_yearChanged();
				}
			}
		}
		
		[Column(Storage="_sal_month", DbType="Int")]
		public System.Nullable<int> sal_month
		{
			get
			{
				return this._sal_month;
			}
			set
			{
				if ((this._sal_month != value))
				{
					this.Onsal_monthChanging(value);
					this.SendPropertyChanging();
					this._sal_month = value;
					this.SendPropertyChanged("sal_month");
					this.Onsal_monthChanged();
				}
			}
		}
		
		[Column(Storage="_sal_madetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> sal_madetime
		{
			get
			{
				return this._sal_madetime;
			}
			set
			{
				if ((this._sal_madetime != value))
				{
					this.Onsal_madetimeChanging(value);
					this.SendPropertyChanging();
					this._sal_madetime = value;
					this.SendPropertyChanged("sal_madetime");
					this.Onsal_madetimeChanged();
				}
			}
		}
		
		[Column(Storage="_sal_isexamine", DbType="NVarChar(5)")]
		public string sal_isexamine
		{
			get
			{
				return this._sal_isexamine;
			}
			set
			{
				if ((this._sal_isexamine != value))
				{
					this.Onsal_isexamineChanging(value);
					this.SendPropertyChanging();
					this._sal_isexamine = value;
					this.SendPropertyChanged("sal_isexamine");
					this.Onsal_isexamineChanged();
				}
			}
		}
		
		[Column(Storage="_sal_examiner", DbType="NVarChar(20)")]
		public string sal_examiner
		{
			get
			{
				return this._sal_examiner;
			}
			set
			{
				if ((this._sal_examiner != value))
				{
					this.Onsal_examinerChanging(value);
					this.SendPropertyChanging();
					this._sal_examiner = value;
					this.SendPropertyChanged("sal_examiner");
					this.Onsal_examinerChanged();
				}
			}
		}
		
		[Column(Storage="_sal_examinetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> sal_examinetime
		{
			get
			{
				return this._sal_examinetime;
			}
			set
			{
				if ((this._sal_examinetime != value))
				{
					this.Onsal_examinetimeChanging(value);
					this.SendPropertyChanging();
					this._sal_examinetime = value;
					this.SendPropertyChanged("sal_examinetime");
					this.Onsal_examinetimeChanged();
				}
			}
		}
		
		[Column(Storage="_sal_isgrant", DbType="NVarChar(1)")]
		public System.Nullable<char> sal_isgrant
		{
			get
			{
				return this._sal_isgrant;
			}
			set
			{
				if ((this._sal_isgrant != value))
				{
					this.Onsal_isgrantChanging(value);
					this.SendPropertyChanging();
					this._sal_isgrant = value;
					this.SendPropertyChanged("sal_isgrant");
					this.Onsal_isgrantChanged();
				}
			}
		}
		
		[Column(Storage="_sal_granttime", DbType="DateTime")]
		public System.Nullable<System.DateTime> sal_granttime
		{
			get
			{
				return this._sal_granttime;
			}
			set
			{
				if ((this._sal_granttime != value))
				{
					this.Onsal_granttimeChanging(value);
					this.SendPropertyChanging();
					this._sal_granttime = value;
					this.SendPropertyChanged("sal_granttime");
					this.Onsal_granttimeChanged();
				}
			}
		}
		
		[Association(Name="salary_sresult", Storage="_sresult", OtherKey="sal_id")]
		public EntitySet<sresult> sresult
		{
			get
			{
				return this._sresult;
			}
			set
			{
				this._sresult.Assign(value);
			}
		}
		
		[Association(Name="salary_remresult", Storage="_remresult", OtherKey="sal_id")]
		public EntitySet<remresult> remresult
		{
			get
			{
				return this._remresult;
			}
			set
			{
				this._remresult.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sresult(sresult entity)
		{
			this.SendPropertyChanging();
			entity.salary = this;
		}
		
		private void detach_sresult(sresult entity)
		{
			this.SendPropertyChanging();
			entity.salary = null;
		}
		
		private void attach_remresult(remresult entity)
		{
			this.SendPropertyChanging();
			entity.salary = this;
		}
		
		private void detach_remresult(remresult entity)
		{
			this.SendPropertyChanging();
			entity.salary = null;
		}
	}
	
	[Table(Name="dbo.sreport")]
	public partial class sreport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sre_id;
		
		private string _sre_name;
		
		private System.Nullable<int> _sre_year;
		
		private System.Nullable<int> _sre_month;
		
		private System.Nullable<System.DateTime> _sre_madetime;
		
		private string _sre_title;
		
		private string _sre_content;
		
		private string _sre_type;
		
		private System.Nullable<char> _sre_iscustom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsre_idChanging(int value);
    partial void Onsre_idChanged();
    partial void Onsre_nameChanging(string value);
    partial void Onsre_nameChanged();
    partial void Onsre_yearChanging(System.Nullable<int> value);
    partial void Onsre_yearChanged();
    partial void Onsre_monthChanging(System.Nullable<int> value);
    partial void Onsre_monthChanged();
    partial void Onsre_madetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onsre_madetimeChanged();
    partial void Onsre_titleChanging(string value);
    partial void Onsre_titleChanged();
    partial void Onsre_contentChanging(string value);
    partial void Onsre_contentChanged();
    partial void Onsre_typeChanging(string value);
    partial void Onsre_typeChanged();
    partial void Onsre_iscustomChanging(System.Nullable<char> value);
    partial void Onsre_iscustomChanged();
    #endregion
		
		public sreport()
		{
			OnCreated();
		}
		
		[Column(Storage="_sre_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int sre_id
		{
			get
			{
				return this._sre_id;
			}
			set
			{
				if ((this._sre_id != value))
				{
					this.Onsre_idChanging(value);
					this.SendPropertyChanging();
					this._sre_id = value;
					this.SendPropertyChanged("sre_id");
					this.Onsre_idChanged();
				}
			}
		}
		
		[Column(Storage="_sre_name", DbType="NVarChar(50)")]
		public string sre_name
		{
			get
			{
				return this._sre_name;
			}
			set
			{
				if ((this._sre_name != value))
				{
					this.Onsre_nameChanging(value);
					this.SendPropertyChanging();
					this._sre_name = value;
					this.SendPropertyChanged("sre_name");
					this.Onsre_nameChanged();
				}
			}
		}
		
		[Column(Storage="_sre_year", DbType="Int")]
		public System.Nullable<int> sre_year
		{
			get
			{
				return this._sre_year;
			}
			set
			{
				if ((this._sre_year != value))
				{
					this.Onsre_yearChanging(value);
					this.SendPropertyChanging();
					this._sre_year = value;
					this.SendPropertyChanged("sre_year");
					this.Onsre_yearChanged();
				}
			}
		}
		
		[Column(Storage="_sre_month", DbType="Int")]
		public System.Nullable<int> sre_month
		{
			get
			{
				return this._sre_month;
			}
			set
			{
				if ((this._sre_month != value))
				{
					this.Onsre_monthChanging(value);
					this.SendPropertyChanging();
					this._sre_month = value;
					this.SendPropertyChanged("sre_month");
					this.Onsre_monthChanged();
				}
			}
		}
		
		[Column(Storage="_sre_madetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> sre_madetime
		{
			get
			{
				return this._sre_madetime;
			}
			set
			{
				if ((this._sre_madetime != value))
				{
					this.Onsre_madetimeChanging(value);
					this.SendPropertyChanging();
					this._sre_madetime = value;
					this.SendPropertyChanged("sre_madetime");
					this.Onsre_madetimeChanged();
				}
			}
		}
		
		[Column(Storage="_sre_title", DbType="NVarChar(1000)")]
		public string sre_title
		{
			get
			{
				return this._sre_title;
			}
			set
			{
				if ((this._sre_title != value))
				{
					this.Onsre_titleChanging(value);
					this.SendPropertyChanging();
					this._sre_title = value;
					this.SendPropertyChanged("sre_title");
					this.Onsre_titleChanged();
				}
			}
		}
		
		[Column(Storage="_sre_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string sre_content
		{
			get
			{
				return this._sre_content;
			}
			set
			{
				if ((this._sre_content != value))
				{
					this.Onsre_contentChanging(value);
					this.SendPropertyChanging();
					this._sre_content = value;
					this.SendPropertyChanged("sre_content");
					this.Onsre_contentChanged();
				}
			}
		}
		
		[Column(Storage="_sre_type", DbType="NVarChar(20)")]
		public string sre_type
		{
			get
			{
				return this._sre_type;
			}
			set
			{
				if ((this._sre_type != value))
				{
					this.Onsre_typeChanging(value);
					this.SendPropertyChanging();
					this._sre_type = value;
					this.SendPropertyChanged("sre_type");
					this.Onsre_typeChanged();
				}
			}
		}
		
		[Column(Storage="_sre_iscustom", DbType="NVarChar(1)")]
		public System.Nullable<char> sre_iscustom
		{
			get
			{
				return this._sre_iscustom;
			}
			set
			{
				if ((this._sre_iscustom != value))
				{
					this.Onsre_iscustomChanging(value);
					this.SendPropertyChanging();
					this._sre_iscustom = value;
					this.SendPropertyChanged("sre_iscustom");
					this.Onsre_iscustomChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
